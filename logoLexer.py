# Generated from logo.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,326,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,116,8,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,130,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,3,3,141,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,151,8,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,162,8,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,175,8,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,192,8,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,207,8,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,5,12,224,
        8,12,10,12,12,12,227,9,12,1,13,3,13,230,8,13,1,14,3,14,233,8,14,
        1,15,1,15,1,15,3,15,238,8,15,1,15,1,15,3,15,242,8,15,1,16,4,16,245,
        8,16,11,16,12,16,246,1,16,1,16,4,16,251,8,16,11,16,12,16,252,3,16,
        255,8,16,1,17,4,17,258,8,17,11,17,12,17,259,1,18,1,18,1,19,1,19,
        1,20,4,20,267,8,20,11,20,12,20,268,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
        1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
        1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,0,0,48,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        0,29,0,31,14,33,0,35,0,37,0,39,15,41,16,43,17,45,0,47,0,49,0,51,
        0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,
        0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,1,0,30,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,43,43,45,45,3,0,9,
        10,13,13,32,32,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,
        0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,
        103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,
        75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,
        2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,
        114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,
        0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,
        121,2,0,90,90,122,122,310,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,31,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,97,1,0,0,0,3,115,
        1,0,0,0,5,129,1,0,0,0,7,140,1,0,0,0,9,150,1,0,0,0,11,161,1,0,0,0,
        13,174,1,0,0,0,15,191,1,0,0,0,17,206,1,0,0,0,19,208,1,0,0,0,21,214,
        1,0,0,0,23,217,1,0,0,0,25,221,1,0,0,0,27,229,1,0,0,0,29,232,1,0,
        0,0,31,234,1,0,0,0,33,244,1,0,0,0,35,257,1,0,0,0,37,261,1,0,0,0,
        39,263,1,0,0,0,41,266,1,0,0,0,43,272,1,0,0,0,45,274,1,0,0,0,47,276,
        1,0,0,0,49,278,1,0,0,0,51,280,1,0,0,0,53,282,1,0,0,0,55,284,1,0,
        0,0,57,286,1,0,0,0,59,288,1,0,0,0,61,290,1,0,0,0,63,292,1,0,0,0,
        65,294,1,0,0,0,67,296,1,0,0,0,69,298,1,0,0,0,71,300,1,0,0,0,73,302,
        1,0,0,0,75,304,1,0,0,0,77,306,1,0,0,0,79,308,1,0,0,0,81,310,1,0,
        0,0,83,312,1,0,0,0,85,314,1,0,0,0,87,316,1,0,0,0,89,318,1,0,0,0,
        91,320,1,0,0,0,93,322,1,0,0,0,95,324,1,0,0,0,97,98,3,79,39,0,98,
        99,3,45,22,0,99,100,3,71,35,0,100,101,3,51,25,0,101,102,3,73,36,
        0,102,103,3,69,34,0,103,2,1,0,0,0,104,105,3,55,27,0,105,106,3,73,
        36,0,106,116,1,0,0,0,107,108,3,55,27,0,108,109,3,73,36,0,109,110,
        3,79,39,0,110,111,3,89,44,0,111,112,3,45,22,0,112,113,3,79,39,0,
        113,114,3,51,25,0,114,116,1,0,0,0,115,104,1,0,0,0,115,107,1,0,0,
        0,116,4,1,0,0,0,117,118,3,47,23,0,118,119,3,65,32,0,119,130,1,0,
        0,0,120,121,3,47,23,0,121,122,3,45,22,0,122,123,3,49,24,0,123,124,
        3,65,32,0,124,125,3,89,44,0,125,126,3,45,22,0,126,127,3,79,39,0,
        127,128,3,51,25,0,128,130,1,0,0,0,129,117,1,0,0,0,129,120,1,0,0,
        0,130,6,1,0,0,0,131,132,3,79,39,0,132,133,3,83,41,0,133,141,1,0,
        0,0,134,135,3,79,39,0,135,136,3,61,30,0,136,137,3,57,28,0,137,138,
        3,59,29,0,138,139,3,83,41,0,139,141,1,0,0,0,140,131,1,0,0,0,140,
        134,1,0,0,0,141,8,1,0,0,0,142,143,3,67,33,0,143,144,3,83,41,0,144,
        151,1,0,0,0,145,146,3,67,33,0,146,147,3,53,26,0,147,148,3,55,27,
        0,148,149,3,83,41,0,149,151,1,0,0,0,150,142,1,0,0,0,150,145,1,0,
        0,0,151,10,1,0,0,0,152,153,3,75,37,0,153,154,3,85,42,0,154,162,1,
        0,0,0,155,156,3,75,37,0,156,157,3,53,26,0,157,158,3,71,35,0,158,
        159,3,85,42,0,159,160,3,75,37,0,160,162,1,0,0,0,161,152,1,0,0,0,
        161,155,1,0,0,0,162,12,1,0,0,0,163,164,3,75,37,0,164,165,3,51,25,
        0,165,175,1,0,0,0,166,167,3,75,37,0,167,168,3,53,26,0,168,169,3,
        71,35,0,169,170,3,51,25,0,170,171,3,73,36,0,171,172,3,89,44,0,172,
        173,3,71,35,0,173,175,1,0,0,0,174,163,1,0,0,0,174,166,1,0,0,0,175,
        14,1,0,0,0,176,177,3,49,24,0,177,178,3,81,40,0,178,192,1,0,0,0,179,
        180,3,49,24,0,180,181,3,67,33,0,181,182,3,53,26,0,182,183,3,45,22,
        0,183,184,3,79,39,0,184,185,3,81,40,0,185,186,3,49,24,0,186,187,
        3,79,39,0,187,188,3,53,26,0,188,189,3,53,26,0,189,190,3,71,35,0,
        190,192,1,0,0,0,191,176,1,0,0,0,191,179,1,0,0,0,192,16,1,0,0,0,193,
        194,3,89,44,0,194,195,3,49,24,0,195,207,1,0,0,0,196,197,3,89,44,
        0,197,198,3,61,30,0,198,199,3,75,37,0,199,200,3,53,26,0,200,201,
        3,49,24,0,201,202,3,67,33,0,202,203,3,53,26,0,203,204,3,45,22,0,
        204,205,3,71,35,0,205,207,1,0,0,0,206,193,1,0,0,0,206,196,1,0,0,
        0,207,18,1,0,0,0,208,209,3,81,40,0,209,210,3,53,26,0,210,211,3,83,
        41,0,211,212,3,91,45,0,212,213,3,93,46,0,213,20,1,0,0,0,214,215,
        3,83,41,0,215,216,3,73,36,0,216,22,1,0,0,0,217,218,3,53,26,0,218,
        219,3,71,35,0,219,220,3,51,25,0,220,24,1,0,0,0,221,225,3,27,13,0,
        222,224,3,29,14,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,
        0,225,226,1,0,0,0,226,26,1,0,0,0,227,225,1,0,0,0,228,230,7,0,0,0,
        229,228,1,0,0,0,230,28,1,0,0,0,231,233,7,1,0,0,232,231,1,0,0,0,233,
        30,1,0,0,0,234,241,3,33,16,0,235,237,3,53,26,0,236,238,3,37,18,0,
        237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,3,35,17,
        0,240,242,1,0,0,0,241,235,1,0,0,0,241,242,1,0,0,0,242,32,1,0,0,0,
        243,245,2,48,57,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,
        0,246,247,1,0,0,0,247,254,1,0,0,0,248,250,5,46,0,0,249,251,2,48,
        57,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,
        0,0,253,255,1,0,0,0,254,248,1,0,0,0,254,255,1,0,0,0,255,34,1,0,0,
        0,256,258,2,48,57,0,257,256,1,0,0,0,258,259,1,0,0,0,259,257,1,0,
        0,0,259,260,1,0,0,0,260,36,1,0,0,0,261,262,7,2,0,0,262,38,1,0,0,
        0,263,264,5,44,0,0,264,40,1,0,0,0,265,267,7,3,0,0,266,265,1,0,0,
        0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,
        0,270,271,6,20,0,0,271,42,1,0,0,0,272,273,5,58,0,0,273,44,1,0,0,
        0,274,275,7,4,0,0,275,46,1,0,0,0,276,277,7,5,0,0,277,48,1,0,0,0,
        278,279,7,6,0,0,279,50,1,0,0,0,280,281,7,7,0,0,281,52,1,0,0,0,282,
        283,7,8,0,0,283,54,1,0,0,0,284,285,7,9,0,0,285,56,1,0,0,0,286,287,
        7,10,0,0,287,58,1,0,0,0,288,289,7,11,0,0,289,60,1,0,0,0,290,291,
        7,12,0,0,291,62,1,0,0,0,292,293,7,13,0,0,293,64,1,0,0,0,294,295,
        7,14,0,0,295,66,1,0,0,0,296,297,7,15,0,0,297,68,1,0,0,0,298,299,
        7,16,0,0,299,70,1,0,0,0,300,301,7,17,0,0,301,72,1,0,0,0,302,303,
        7,18,0,0,303,74,1,0,0,0,304,305,7,19,0,0,305,76,1,0,0,0,306,307,
        7,20,0,0,307,78,1,0,0,0,308,309,7,21,0,0,309,80,1,0,0,0,310,311,
        7,22,0,0,311,82,1,0,0,0,312,313,7,23,0,0,313,84,1,0,0,0,314,315,
        7,24,0,0,315,86,1,0,0,0,316,317,7,25,0,0,317,88,1,0,0,0,318,319,
        7,26,0,0,319,90,1,0,0,0,320,321,7,27,0,0,321,92,1,0,0,0,322,323,
        7,28,0,0,323,94,1,0,0,0,324,325,7,29,0,0,325,96,1,0,0,0,19,0,115,
        129,140,150,161,174,191,206,225,229,232,237,241,246,252,254,259,
        268,1,6,0,0
    ]

class logoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    RANDOM = 1
    FORWARD = 2
    BACKWARD = 3
    RIGHT = 4
    LEFT = 5
    PENUP = 6
    PENDOWN = 7
    CLEAR_SCREEN = 8
    WIPE_CLEAN = 9
    SET_XY = 10
    TO = 11
    END = 12
    IDENTIFIER = 13
    SCIENTIFIC_NUMBER = 14
    COMMA = 15
    WS = 16
    COLON = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "':'" ]

    symbolicNames = [ "<INVALID>",
            "RANDOM", "FORWARD", "BACKWARD", "RIGHT", "LEFT", "PENUP", "PENDOWN", 
            "CLEAR_SCREEN", "WIPE_CLEAN", "SET_XY", "TO", "END", "IDENTIFIER", 
            "SCIENTIFIC_NUMBER", "COMMA", "WS", "COLON" ]

    ruleNames = [ "RANDOM", "FORWARD", "BACKWARD", "RIGHT", "LEFT", "PENUP", 
                  "PENDOWN", "CLEAR_SCREEN", "WIPE_CLEAN", "SET_XY", "TO", 
                  "END", "IDENTIFIER", "VALID_ID_START", "VALID_ID_CHAR", 
                  "SCIENTIFIC_NUMBER", "NUMBER", "UNSIGNED_INTEGER", "SIGN", 
                  "COMMA", "WS", "COLON", "A", "B", "C", "D", "E", "F", 
                  "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", 
                  "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ]

    grammarFileName = "logo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


